#!/usr/bin/env bash

#Login to private registry
authenticate() {
    if ! grep -q "$REGISTRY" ~/.docker/config.json ; then
        echo "Docker Sign in"
        docker login "$REGISTRY"
        if [ $? -ne 0 ]; then
            echo Login failed!
            exit
        fi
    fi
    echo Login success!
}

checkDockerStatus() {
    read -p "Is the docker daemon running [Yy/Nn]?" yn
    checkDockerStatus=true
    while $checkDockerStatus; do
        case $yn in
            [Yy] ) checkDockerStatus=false
                   ;;
            [Nn] ) echo "Start daemon and retry"
                    checkDockerStatus=false
                    ;;
            * ) read -p "Please answer Yy or Nn " yn
                ;;
        esac
    done
}

choiceBranch() {
    echo "Show active branches"
    git fetch --all
    git branch --all
    echo "--------------------"

    #Update source code
    echo -n "Which branch do you want to use? The system will take care to checkout and pull automatically: "
    read branchInput
    if [[ -n "$branchInput" ]]
    then
        git checkout "$branchInput" && git pull origin "$branchInput"
    else
        echo "ERROR: No branch selected"
        exit
    fi
}

choiceSynchronizeAssets() {

    showActiveProjects

    echo -n "Which project do you want to synchronize? "
    read projectInput

    read -p "Do you want to synchronize assets folder [Yy/Nn]? " yn
    checkDockerStatus=true
    while $checkDockerStatus; do
        case $yn in
            [Yy] ) updateImages
                   checkDockerStatus=false
                   ;;
            [Nn] ) echo "Assets not will be synchronized"
                    checkDockerStatus=false
                    ;;
            * ) read -p "Please answer Yy or Nn " yn
                ;;
        esac
    done
}

# SSH Connection to show active projects
showActiveProjects() {
    echo "Show active projects"
    ssh "$SSH_USERNAME"@"$REMOTE_HOST" sudo ls -l "$ASSETS_FOLDER"

    if [ ! $? -eq 0 ]; then
        echo "Failed attempt ssh connection for $SSH_USERNAME to $REMOTE_HOST"
        exit
    fi
}

# Update assets
updateImages() {

    #Copy drupal assets and settings
    if [[ "$AVAILABLE_PLATFORM" == wordpress ]]
    then
        assetsFolderName="uploads"

    elif [[ "$AVAILABLE_PLATFORM" == drupal ]]
    then
        assetsFolderName="files"
    fi

    echo "$SSH_USERNAME"@"$REMOTE_HOST":"/home/$SSH_USERNAME/$assetsFolderName.zip TO $PROJECT_ASSETS_FOLDER"
    sleep 5
    ssh "$SSH_USERNAME"@"$REMOTE_HOST" sudo cp "$ASSETS_FOLDER/$projectInput/$branchInput/$assetsFolderName.zip /home/$SSH_USERNAME"
    if [ $? -eq 0 ]; then
        scp -r "$SSH_USERNAME"@"$REMOTE_HOST":"/home/$SSH_USERNAME/$assetsFolderName.zip" "$PROJECT_ASSETS_FOLDER"
        if [ $? -eq 0 ]; then
            echo "$assetsFolderName.zip has been copied inside $PROJECT_ASSETS_FOLDER"
            cd "$PROJECT_ASSETS_FOLDER"
            unzip "$assetsFolderName".zip
            if [ $? -eq 0 ]; then
                echo "$assetsFolderName folder has been unzipped"
                rm -rf "$PROJECT_ASSETS_FOLDER/$assetsFolderName.zip"
            else
                echo "Failed attempt to unzip $assetsFolderName folder. Do you have unzip command installed? Check and retry"
                exit
            fi
        else
            echo "Failed attempt ssh connection for $SSH_USERNAME to $REMOTE_HOST"
            exit
        fi
    else
        echo "Failed attempt ssh connection for $SSH_USERNAME to $REMOTE_HOST"
        exit
    fi

    cd "$DOCUMENT_ROOT"
}

copyDataBaseDump() {

    #Clean init-db directory
    if [ -e ./init-db ]
    then
        rm -rf ./init-db/*
    else
        mkdir ./init-db
    fi

    checkAnotherDataBase=true
    while $checkAnotherDataBase; do

        ####### *********** #######
        #Download dump and run mysql container
        echo "Show available dump"
        ssh "$SSH_USERNAME"@"$REMOTE_HOST" sudo ls -l "$ASSETS_FOLDER/$1/$2"

        if [ ! $? -eq 0 ]; then
            echo "Failed attempt ssh connection for $SSH_USERNAME to $REMOTE_HOST"
            exit
        fi
        read -p "Choice sql file to init database: " sqlDump


        checkFileExist=true
        while "$checkFileExist"; do
            ssh "$SSH_USERNAME"@"$REMOTE_HOST" sudo cp "$ASSETS_FOLDER/$1/$2/$sqlDump /home/$SSH_USERNAME"

            if [ $? -eq 0 ]
            then

                scp -r "$SSH_USERNAME"@"$REMOTE_HOST":"/home/$SSH_USERNAME/$sqlDump" ./init-db/"$sqlDump"
                checkFileExist=false
            else
                read -p "Choice a valid sql file: " sqlDump
            fi
        done
        ####### *********** #######

        read -p "Do you want import another database.[Yy/Nn]? " yn
        case "$yn" in
            [Yy] ) checkAnotherDataBase=true
                   ;;
            [Nn] ) checkAnotherDataBase=false
                   ;;
            * ) read -p "Please answer Yy or Nn " yn
                ;;
        esac
    done

}

# Copy renamed specific settings file
copySettings() {
    if [ $AVAILABLE_PLATFORM == drupal ]
    then
        if [ -e "$DOCUMENT_ROOT"sites/example.settings.docker.local-env."$branchNameDashed".php ]; then
            if [ -e "$PROJECT_ASSETS_FOLDER"settings.php ];then
                chmod 777 "$PROJECT_ASSETS_FOLDER"settings.php
            fi
            cp "$DOCUMENT_ROOT"sites/example.settings.docker.local-env."$branchNameDashed".php "$PROJECT_ASSETS_FOLDER"settings.php
        fi

        if [ -e "$DOCUMENT_ROOT"sites/example.settings.local.localdev.php ]; then
            if [ -e "$PROJECT_ASSETS_FOLDER"settings.local.php ];then
                chmod 777 "$PROJECT_ASSETS_FOLDER"settings.php
            fi
            cp "$DOCUMENT_ROOT"sites/example.settings.local.localdev.php "$PROJECT_ASSETS_FOLDER"settings.local.php
        fi
    elif [ $AVAILABLE_PLATFORM == symfony ]
    then
        if [ -e "$DOCUMENT_ROOT"../app/config/example.parameters.docker.local-env."$branchNameDashed".yml ]; then
            if [ -e "$DOCUMENT_ROOT"../app/config/parameters.yml ];then
                chmod 777 "$DOCUMENT_ROOT"../app/config/parameters.yml
            fi
            cp "$DOCUMENT_ROOT"../app/config/example.parameters.docker.local-env."$branchNameDashed".yml "$DOCUMENT_ROOT"../app/config/parameters.yml
        fi
    fi
}


spinner() {
#    local pid=$!
#    local delay=0.25
#    local spinstr='|/-\'
#    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
#        local temp=${spinstr#?}
#        printf " [%c] " "$spinstr"
#        local spinstr=$temp${spinstr%"$temp"}
#        sleep $delay
#        printf "\b\b\b\b\b\b"
#    done
#    printf "    \b\b\b\b"

  pid=$! # Process Id of the previous running command

  spin='-\|/'

  i=0
  while kill -0 $pid 2>/dev/null
  do
    i=$(( (i+1) %4 ))
    printf "\r${spin:$i:1}"
    sleep .1
  done
}
